---
include:
  - project: nci-gdc/gitlab-templates
    ref: feat/dev-2667-python-docker-services
    file:
      - templates/artifacts/python-service.yaml

variables:
  SERVICE_NAME: indexd

tox:
  parallel:
    matrix:
      - BUILD_PY_VERSION: [python3.7, python3.8, python3.9, python3.10, python3.11]
  services:
    - name: docker.osdc.io/ncigdc/ci-postgres-13:${BASE_CONTAINER_VERSION}
      alias: postgres
  variables:
    PG_INDEXD_USER: test
    PG_INDEXD_PASS: test
    PG_INDEXD_HOST: postgres
    PG_INDEXD_DROP_DB: 'false'
    PG_INDEXD_ROOT_USER: test
    PG_INDEXD_ROOT_PASS: test
    POSTGRES_DB: indexd_test
    POSTGRES_USER: test
    POSTGRES_PASSWORD: test
    POSTGRES_HOST_AUTH_METHOD: trust
  script:
    - mkdir -p /usr/share/man/man1
    - dnf -y install java-11-amazon-corretto-headless
    - java -version
    - pip install 'tox > 4'
    - tox -e py

containerize:
  stage: build-and-publish
  extends: .job-with-ssh-keys
  needs:
    - publish
  variables:
    DOCKER_BUILDKIT: 1
    GIT_BRANCH: $CI_COMMIT_REF_NAME
    IMAGE_NAME: $CONTAINER_REGISTRY/ncigdc/${SERVICE_NAME}
  services:
    - docker:$DOCKER_VERSION-dind
  tags:
    - dind
  before_script:
    - python --version
  script: |-
    pip install versionista==1.0.1dev4

    # replace slashes with underscore
    GIT_BRANCH=${GIT_BRANCH/\//_}
    COMMIT=$(git rev-parse HEAD)

    VERSION=$(python -m setuptools_scm)
    INSTALL_CMD=${SERVICE_NAME}==${VERSION}

    BUILD_COMMAND=(build \
      --build-arg SERVICE_NAME="${SERVICE_NAME}" \
      --build-arg COMMIT="${COMMIT}" \
      --build-arg BUILD_DATE="$(date -Iseconds)" \
      --build-arg PIP_INDEX_URL="${PIP_INDEX_URL}" \
      --build-arg APP_INSTALL_CMD="${INSTALL_CMD}" \
      -t "$IMAGE_NAME:$GIT_BRANCH" \
      -t "$IMAGE_NAME:$COMMIT" \
      -t "$IMAGE_NAME:${COMMIT:0:8}" \
      -t "$IMAGE_NAME:$GIT_BRANCH-${COMMIT:0:8}"
    )

    docker "${BUILD_COMMAND[@]}" . --progress=plain
    if [ "$PARAM" = "push" ]; then
      docker push -a "$IMAGE_NAME"
    fi

.deploy-service-with-salt:
  before_script:
    - export DEPLOY_SERVICE_TAG=${CI_COMMIT_TAG:-$CI_COMMIT_SHA}

.services:
  allow_failure: true
  stage: deploy
  when: manual
  parallel:
    matrix:
      - DEPLOY_SERVICE_LIST: [ indexd ]
