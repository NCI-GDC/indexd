---
include:
  - project: nci-gdc/gitlab-templates
    ref: feat/dev-2667-python-docker-services
    file:
      - templates/artifacts/python-service.yaml

variables:
  SERVICE_NAME: indexd
  DOCKER_VERSION: 26.1.0
  PIP_INDEX_URL: https://nexus.osdc.io/repository/pypi-all/simple

tox:
  parallel:
    matrix:
      - BUILD_PY_VERSION: [python3.7, python3.8, python3.9, python3.10, python3.11]
  services:
    - name: docker.osdc.io/ncigdc/ci-postgres-13:${BASE_CONTAINER_VERSION}
      alias: postgres
  variables:
    PG_INDEXD_USER: test
    PG_INDEXD_PASS: test
    PG_INDEXD_HOST: postgres
    PG_INDEXD_DROP_DB: 'false'
    PG_INDEXD_ROOT_USER: test
    PG_INDEXD_ROOT_PASS: test
    POSTGRES_DB: indexd_test
    POSTGRES_USER: test
    POSTGRES_PASSWORD: test
    POSTGRES_HOST_AUTH_METHOD: trust
  script:
    - mkdir -p /usr/share/man/man1
    - dnf -y install java-11-amazon-corretto-headless
    - java -version
    - pip install 'tox > 4'
    - tox -e py

containerize:
  stage: build-and-publish
  extends: .job-with-ssh-keys
  image: docker:${DOCKER_VERSION}-dind
  needs:
    - publish
  variables:
    DOCKER_BUILDKIT: 1
    COMMIT: $CI_COMMIT_SHA
    USE_PYPI_VERSION: "yes"
    GIT_BRANCH: $CI_COMMIT_REF_NAME
    IMAGE_NAME: $CONTAINER_REGISTRY/ncigdc/${SERVICE_NAME}
  services:
    - docker:$DOCKER_VERSION-dind
  tags:
    - dind
  before_script:
    - docker --version
    - echo "Containerization step"
  script:
    - >
      GIT_BRANCH=$(echo "$CI_COMMIT_REF_NAME" | sed 's/\//_/g')

      SHA=$(printf '%s' "$COMMIT" | cut -c 1-8)

      docker build \
        --build-arg SERVICE_NAME=${SERVICE_NAME} \
        --build-arg COMMIT=${COMMIT} \
        --build-arg BUILD_DATE="$(date -Iseconds)" \
        --build-arg PIP_INDEX_URL=${PIP_INDEX_URL} \
        --build-arg USE_PYPI_VERSION=${USE_PYPI_VERSION} \
        -t $IMAGE_NAME:$GIT_BRANCH \
        -t $IMAGE_NAME:$COMMIT \
        -t $IMAGE_NAME:$SHA \
        -t $IMAGE_NAME:$GIT_BRANCH-$SHA \
      .

      docker push -a "$IMAGE_NAME"

.deploy-service-with-salt:
  before_script:
    - export DEPLOY_SERVICE_TAG=${CI_COMMIT_TAG:-$CI_COMMIT_SHA}

.services:
  allow_failure: true
  stage: deploy
  when: manual
  parallel:
    matrix:
      - DEPLOY_SERVICE_LIST: [ indexd ]
