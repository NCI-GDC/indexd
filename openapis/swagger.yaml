openapi: 3.0.1
info:
  title: Indexd OpenAPI Specification
  description: Indexd is a data indexing and tracking service. The code is open source
    on [github](https://github.com/NCI-GDC/indexd)
  termsOfService: http://cdis.uchicago.edu/terms/
  contact:
    email: cdis@uchicago.edu
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: https://indexd.service.consul
- url: http://indexd.service.consul
tags:
- name: global
  description: Search for an alias or index, potentially even a distributed search.
  externalDocs:
    description: Find out more
    url: https://github.com/NCI-GDC/indexd
- name: index
  description: Associate a file (object) with a unique id, and store some basic metadata.
  externalDocs:
    description: Find out more
    url: https://github.com/NCI-GDC/indexd
- name: bulk
  description: bulk endpoints
- name: query
  description: query endpoints
- name: alias
  description: create an alias for an entity stored in an external system managed
    by some other authority
  externalDocs:
    description: Find out more
    url: https://github.com/NCI-GDC/indexd
- name: DOS
  description: Data Object Service Retrieval Endpoints
- name: system
  description: System endpoints
paths:
  /{GUID}:
    get:
      tags:
      - global
      summary: Get the metadata associated with the given id, alias, or distributed
        identifier
      description: Only the hashes which exist will be included in the response.
      operationId: getEntry
      parameters:
      - name: GUID
        in: path
        description: entry id
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputInfo'
        400:
          description: Invalid status value
          content: {}
        404:
          description: Record not found
          content: {}
  /urls:
    get:
      tags:
      - global
      summary: Get a list of urls that match query params
      operationId: listUrls
      parameters:
      - name: size
        in: query
        description: object size
        schema:
          type: integer
      - name: hash
        in: query
        description: hashes specified as algorithm:value
        schema:
          type: string
      - name: ids
        in: query
        description: comma delimited ids
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UrlOutputRef'
        400:
          description: Invalid input
          content: {}
      security:
      - basic_auth: []
  /index:
    get:
      tags:
      - index
      summary: List all records
      operationId: listIndexEntries
      parameters:
      - name: urls_metadata
        in: query
        description: |
          urls_metadata in json string format as {url_key: {key: value}, ...}
          check doc.url_metadata has key that contains substring url_key
          and regular filter on key: value
        schema:
          type: string
      - name: metadata
        in: query
        description: metadata in format key:value
        schema:
          type: string
      - name: size
        in: query
        description: object size
        schema:
          type: integer
      - name: hash
        in: query
        description: hash in format hash_type:hash_value
        schema:
          type: string
      - name: uploader
        in: query
        description: uploader id
        schema:
          type: string
      - name: ids
        in: query
        description: |
          comma delimited ids, when provided,
          pagination params(start, limit) are not supported
        schema:
          type: string
      - name: urls
        in: query
        description: comma delimited urls
        schema:
          type: string
      - name: acl
        in: query
        description: comma delimited ace
        schema:
          type: string
      - name: negate_params
        in: query
        description: |
          All the negate params go in here as the same format with regular params:
          pass a Document as a json string with all the negated values.
          For string (version, file_name), filter with value != <value>
          For list (urls, acl), filter with doc that don't HAS <value>
          For dict (metadata, urls_metadata). In each (key,value) pair:
          - if value is None or empty: then filter with key doesn't exist
          - if value is provided, then filter with value != <value> OR key doesn't exist
        schema:
          type: string
      - name: start
        in: query
        description: start did
        schema:
          type: string
      - name: limit
        in: query
        description: number of records to return for this page, default to 100
        schema:
          type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRecords'
    post:
      tags:
      - index
      summary: Add a new entry to the index
      operationId: addIndexEntry
      requestBody:
        description: Metadata object that needs to be added to the store. Providing
          at least one hash is necessary and sufficient.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputInfo'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputRef'
        400:
          description: Invalid input
          content: {}
      security:
      - basic_auth: []
      x-codegen-request-body-name: body
  /index/blank:
    post:
      tags:
      - index
      summary: Create a blank record
      operationId: createIndexBlankEntry
      requestBody:
        description: Metadata object that needs to be added to the store
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/InputBlankInfo'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputRef'
        400:
          description: Invalid status value
          content: {}
      security:
      - basic_auth: []
      x-codegen-request-body-name: body
  /index/blank/{GUID}:
    put:
      tags:
      - index
      summary: Update only hashes and size for blank index
      operationId: updateIndexBlankEntry
      parameters:
      - name: GUID
        in: path
        description: entry id
        required: true
        schema:
          type: string
      - name: rev
        in: query
        description: data revision - simple consistency mechanism
        required: true
        schema:
          type: string
      requestBody:
        description: index record that needs to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBlankInputInfo'
        required: true
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputRef'
        400:
          description: Invalid input
          content: {}
      security:
      - basic_auth: []
      x-codegen-request-body-name: body
  /index/{GUID}:
    get:
      tags:
      - index
      summary: Get the metadata associated with the given id
      operationId: getIndexEntry
      parameters:
      - name: GUID
        in: path
        description: entry id
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputInfo'
        400:
          description: Invalid status value
          content: {}
    put:
      tags:
      - index
      summary: Update an existing entry in the index
      operationId: updateIndexEntry
      parameters:
      - name: GUID
        in: path
        description: entry id
        required: true
        schema:
          type: string
      - name: rev
        in: query
        description: data revision - simple consistency mechanism
        required: true
        schema:
          type: string
      requestBody:
        description: index record that needs to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInputInfo'
        required: true
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputRef'
        400:
          description: Invalid input
          content: {}
      security:
      - basic_auth: []
      x-codegen-request-body-name: body
    post:
      tags:
      - index
      summary: Add new version for the document associated to the provided uuid.
      description: Since data content is immutable, when you want to change the size
        or hash, a new index document with new uuid need to be created as its new
        version. That uuid is returned in the did field of the response. The old index
        document is not deleted.
      operationId: addIndexNewVersion
      parameters:
      - name: GUID
        in: path
        description: the uuid associated to the record needed to have new version
        required: true
        schema:
          type: string
      requestBody:
        description: index record metadata for the new version
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/VersionInputInfo'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputRef'
        400:
          description: Invalid status value
          content: {}
      security:
      - basic_auth: []
      x-codegen-request-body-name: body
    delete:
      tags:
      - index
      summary: Delete an entry from the index
      operationId: deleteIndexEntry
      parameters:
      - name: GUID
        in: path
        description: entry id
        required: true
        schema:
          type: string
      - name: rev
        in: query
        description: data revision - simple consistency mechanism
        required: true
        schema:
          type: string
      responses:
        200:
          description: Record is deleted successfully
          content: {}
        400:
          description: Invalid ID supplied
          content: {}
      security:
      - basic_auth: []
  /index/{GUID}/latest:
    get:
      tags:
      - index
      summary: Get the metadata of the latest index record version associated with
        the given id
      operationId: getIndexLatestVersion
      parameters:
      - name: GUID
        in: path
        description: entry id
        required: true
        schema:
          type: string
      - name: has_version
        in: query
        description: filter by latest doc that has version value populated
        schema:
          type: boolean
      - name: exclude_deleted
        in: query
        description: filter by latest doc not marked as deleted
        schema:
          type: boolean
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputInfo'
        400:
          description: Invalid status value
          content: {}
  /index/{GUID}/versions:
    get:
      tags:
      - index
      summary: Get the metadata of index record versions associated with the given
        id
      operationId: getIndexAllVersions
      parameters:
      - name: GUID
        in: path
        description: entry id
        required: true
        schema:
          type: string
      - name: exclude_deleted
        in: query
        description: filter by docs not marked as deleted
        schema:
          type: boolean
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOutputInfo'
        400:
          description: Invalid status value
          content: {}
  /alias/:
    get:
      tags:
      - alias
      summary: list aliases with pagination
      operationId: listAliasEntries
      parameters:
      - name: size
        in: query
        description: size in bytes
        schema:
          type: integer
          format: int64
      - name: start
        in: query
        description: start index for the pagination
        schema:
          type: integer
          format: int64
      - name: limit
        in: query
        description: number of aliases to return
        schema:
          type: integer
      - name: hash
        in: query
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  aliases:
                    type: array
                    items:
                      type: string
                  size:
                    type: integer
                    description: size in bytes
                    format: int64
                  start:
                    type: integer
                    description: start index for the pagination
                    format: int64
                  limit:
                    type: integer
                    description: number of aliases to return
                    format: int64
                  hashes:
                    $ref: '#/components/schemas/HashInfo'
  /alias/{ALIASSTRING}:
    get:
      tags:
      - alias
      summary: Fetch an alias
      operationId: getAliasEntry
      parameters:
      - name: ALIASSTRING
        in: path
        description: alias like ark:/31807/DC1-TESTARK
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AliasOutputInfo'
        400:
          description: Invalid input
          content: {}
    put:
      tags:
      - alias
      summary: Create or update an alias
      operationId: upsertAliasEntry
      parameters:
      - name: ALIASSTRING
        in: path
        description: alias like ark:/31807/DC1-TESTARK
        required: true
        schema:
          type: string
      - name: rev
        in: query
        description: Revision of the current alias to be updated. If you do not specify
          this then the last update wins in races.
        schema:
          pattern: ^[a-z,0-9]{8}$
          type: string
      requestBody:
        description: Metadata object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AliasInputInfo'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AliasRef'
        400:
          description: Invalid input
          content: {}
      security:
      - basic_auth: []
      x-codegen-request-body-name: body
    delete:
      tags:
      - alias
      summary: Delete an alias
      operationId: deleteAliasEntry
      parameters:
      - name: ALIASSTRING
        in: path
        description: alias like ark:/31807/DC1-TESTARK
        required: true
        schema:
          type: string
      - name: rev
        in: query
        description: Revision of the current alias to be deleted.
        schema:
          pattern: ^[a-z,0-9]{8}$
          type: string
      responses:
        200:
          description: successful operation
          content: {}
        400:
          description: Invalid input
          content: {}
      security:
      - basic_auth: []
  /_status:
    get:
      tags:
      - system
      summary: Returns if IndexD is healthy or not
      description: Health check endpoint which checks if IndexD can connect to its
        backing datastore or not.
      responses:
        200:
          description: Healthy
          content: {}
        default:
          description: Unhealthy
          content: {}
  /_version:
    get:
      tags:
      - system
      summary: Returns the version of IndexD
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemVersionOutputRef'
  /_stats:
    get:
      tags:
      - system
      summary: Returns basic information about the records in IndexD
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemStatsOutputRef'
  /ga4gh/dos/v1/dataobjects:
    get:
      tags:
      - DOS
      summary: List the Data Objects
      operationId: ListDataObjects
      parameters:
      - name: alias
        in: query
        description: If provided will only return Data Objects with the given alias.
        schema:
          type: string
      - name: url
        in: query
        description: |-
          If provided will return only Data Objects with a that URL matches
          this string.
        schema:
          type: string
      - name: checksum
        in: query
        description: The hexlified checksum that one would like to match on.
        schema:
          type: string
      - name: checksum_type
        in: query
        description: |-
          If provided will restrict responses to those that match the provided
          type.
          possible values:
          md5                # most blob stores provide a checksum using this
          multipart-md5      # multipart uploads provide a specialized tag in S3
          sha256
          sha512
        schema:
          type: string
      - name: page_size
        in: query
        description: |-
          Specifies the maximum number of results to return in a single page.
          If unspecified, a system default will be used.
        schema:
          type: integer
          format: int32
      - name: page_token
        in: query
        description: |-
          The continuation token, which is used to page through large result sets.
          To get the next page of results, set this parameter to the value of
          `next_page_token` from the previous response.
        schema:
          type: string
      responses:
        200:
          description: The Data Objects were listed successfully.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListDataObjectsResponse'
        400:
          description: The request is malformed.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The request is unauthorized.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: The requester is not authorized to perform this action.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: An unexpected error occurred.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /ga4gh/dos/v1/dataobjects/{GUID}:
    get:
      tags:
      - DOS
      summary: Retrieve a Data Object
      operationId: GetDataObject
      parameters:
      - name: GUID
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: The Data Object was found successfully.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetDataObjectResponse'
        400:
          description: The request is malformed.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        401:
          description: The request is unauthorized.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: The requester is not authorized to perform this action.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: The requested Data Object wasn't found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: An unexpected error occurred.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /bulk/documents:
    post:
      tags:
      - bulk
      summary: Get a list of documents given a list of dids
      operationId: getBulkIds
      requestBody:
        description: List of dids to retrieve
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/BulkInputInfo'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOutputInfo'
        400:
          description: Invalid status value
          content: {}
      x-codegen-request-body-name: body
  /bulk/documents/latest:
    post:
      tags:
      - bulk
      summary: Get the latest version documents of the given list of dids
      operationId: getBulkLatest
      parameters:
      - name: skip_null
        in: query
        description: filter by latest doc that has version value populated
        schema:
          type: boolean
      - name: exclude_deleted
        in: query
        description: filter by latest doc not marked as deleted
        schema:
          type: boolean
      requestBody:
        description: List of dids to retrieve
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/BulkInputInfo'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOutputInfo'
        '400':
          description: Invalid status value
          content: {}
      x-codegen-request-body-name: body
  /_query/urls/q:
    get:
      tags:
      - query
      summary: search index records by urls
      operationId: queryUrls
      parameters:
      - name: exclude
        in: query
        description: search for documents without a single URL that match this pattern
        schema:
          type: string
      - name: include
        in: query
        description: search for documents with at least one URL that match this pattern
        schema:
          type: string
      - name: versioned
        in: query
        description: if true search for documents with a version set, if false search
          documents without version, else search both versioned and unversioned 
          documents
        schema:
          type: boolean
      - name: exclude_deleted
        in: query
        description: if true search documents not flagged as deleted, else search all
          documents regardless of deleted status
        schema:
          type: boolean
          default: false
      - name: limit
        in: query
        description: maximum rows to return
        schema:
          type: integer
          default: 100
      - name: offset
        in: query
        description: pointer position to start search
        schema:
          type: integer
          default: 0
      - name: fields
        in: query
        description: Comma separated list (defaults to did,urls) of fields to return. Valid fields are did and urls.
        schema:
          type: string
          default: urls,did
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/URLsOutput'
        '400':
          description: invalid request parameters
          content: {}
  /_query/urls/metadata/q:
    get:
      tags:
      - query
      summary: search index records by urls metadata key and value
      operationId: queryUrlsMetadata
      parameters:
      - name: key
        in: query
        description: metadata key to search by
        required: true
        schema:
          type: string
      - name: value
        in: query
        description: metadata value for provided key
        required: true
        schema:
          type: string
      - name: url
        in: query
        description: URL patter to filter by
        schema:
          type: string
      - name: versioned
        in: query
        description: if true search for documents with a version set, if false search
          documents without version, else search both versioned and unversioned 
          documents
        schema:
          type: boolean
      - name: exclude_deleted
        in: query
        description: if true search documents not flagged as deleted, else search all
          documents regardless of deleted status
        schema:
          type: boolean
          default: false
      - name: limit
        in: query
        description: maximum rows to return
        schema:
          type: integer
          default: 100
      - name: offset
        in: query
        description: pointer position to start search
        schema:
          type: integer
          default: 0
      - name: fields
        in: query
        description: Comma separated list (defaults to did,urls,rev) of fields to return. Valid fields are did, urls and rev.
        schema:
          type: string
          default: urls,did,rev
      responses:
        200:
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/URLsMetadataOutput'
        400:
          description: invalid request parameters
          content: {}
components:
  schemas:
    HashInfo:
      type: object
      properties:
        md5:
          pattern: ^[0-9a-f]{32}$
          type: string
        sha:
          pattern: ^[0-9a-f]{40}$
          type: string
        sha256:
          pattern: ^[0-9a-f]{64}$
          type: string
        sha512:
          pattern: ^[0-9a-f]{128}$
          type: string
        crc:
          pattern: ^[0-9a-f]{8}$
          type: string
        etag:
          pattern: ^[0-9a-f]{32}(-\d+)?$
          type: string
    VersionInputInfo:
      required:
      - form
      - hashes
      - size
      - urls
      type: object
      properties:
        did:
          $ref: '#/components/schemas/DID'
        form:
          type: string
          description: how the entry was submitted to storage
          enum:
          - object
          - container
          - multipart
        size:
          type: integer
          description: size in bytes
          format: int64
        file_name:
          type: string
        metadata:
          type: object
          properties: {}
        urls_metadata:
          type: object
          properties: {}
        version:
          type: string
        urls:
          type: array
          items:
            type: string
        acl:
          type: array
          items:
            type: string
        hashes:
          $ref: '#/components/schemas/HashInfo'
    BulkInputInfo:
      required:
      - ids
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
    InputInfo:
      required:
      - form
      - hashes
      - size
      - urls
      type: object
      properties:
        did:
          $ref: '#/components/schemas/DID'
        baseid:
          $ref: '#/components/schemas/UUID'
        form:
          type: string
          description: how the entry was submitted to storage
          enum:
          - object
          - container
          - multipart
        size:
          type: integer
          description: size in bytes
          format: int64
        file_name:
          type: string
        metadata:
          type: object
          properties: {}
        urls_metadata:
          type: object
          properties: {}
        version:
          type: string
        urls:
          type: array
          items:
            type: string
        acl:
          type: array
          items:
            type: string
        hashes:
          $ref: '#/components/schemas/HashInfo'
    InputBlankInfo:
      type: object
      properties:
        uploader:
          type: string
          description: user who uploaded this file
        file_name:
          type: string
          description: name of the uploaded file
    UpdateInputInfo:
      type: object
      properties:
        hashes:
          $ref: '#/components/schemas/HashInfo'
        file_name:
          type: string
        size:
          type: integer
          description: size in bytes
          format: int64
        metadata:
          type: object
          properties: {}
        urls_metadata:
          type: object
          properties: {}
        version:
          type: string
        urls:
          type: array
          items:
            type: string
        acl:
          type: array
          items:
            type: string
    UpdateBlankInputInfo:
      type: object
      properties:
        size:
          type: integer
        hashes:
          $ref: '#/components/schemas/HashInfo'
        urls:
          type: array
          items:
            type: string
        urls_metadata:
          type: object
          properties: {}
          description: url level metadata
    OutputRef:
      type: object
      properties:
        did:
          $ref: '#/components/schemas/DID'
        baseid:
          $ref: '#/components/schemas/UUID'
        rev:
          pattern: ^[0-9a-f]{8}$
          type: string
    AliasInputInfo:
      required:
      - hashes
      - release
      - size
      type: object
      properties:
        release:
          type: string
          description: has the entity been released?
          enum:
          - public
          - private
          - controlled
        size:
          type: integer
          description: size in bytes
          format: int64
        keeper_authority:
          type: string
          description: who is keeping this entry up to date?
        host_authority:
          type: array
          description: who is hosting this entity?
          items:
            type: string
        hashes:
          $ref: '#/components/schemas/HashInfo'
        metadata:
          type: string
    AliasRef:
      type: object
      properties:
        name:
          type: string
        rev:
          pattern: ^[0-9a-f]{8}$
          type: string
    AliasOutputInfo:
      type: object
      properties:
        name:
          type: string
        rev:
          pattern: ^[0-9a-f]{8}$
          type: string
        release:
          type: string
          description: has the entity been released?
          enum:
          - public
          - private
          - controlled
        size:
          type: integer
          description: size in bytes
          format: int64
        keeper_authority:
          type: string
          description: who is keeping this entry up to date?
        host_authorities:
          type: array
          description: who is hosting this entity?
          items:
            type: string
        hashes:
          $ref: '#/components/schemas/HashInfo'
        metadata:
          type: string
        limit:
          type: integer
          description: number of aliases to return
          format: int64
        start:
          type: integer
          description: start index for the pagination
          format: int64
        urls:
          type: array
          items:
            type: string
    DID:
      pattern: ^.*[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
      type: string
    UUID:
      pattern: ^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$
      type: string
    BulkOutputInfo:
      type: array
      items:
        $ref: '#/components/schemas/OutputInfo'
    OutputInfo:
      type: object
      properties:
        did:
          $ref: '#/components/schemas/DID'
        baseid:
          $ref: '#/components/schemas/UUID'
        rev:
          pattern: ^[0-9a-f]{8}$
          type: string
        form:
          type: string
          description: how the entry was submitted to storage
          enum:
          - object
          - container
          - multipart
        size:
          type: integer
          description: size in bytes
          format: int64
        file_name:
          type: string
        version:
          type: string
        uploader:
          type: string
        urls:
          type: array
          items:
            type: string
        acl:
          type: array
          items:
            type: string
        hashes:
          $ref: '#/components/schemas/HashInfo'
        updated_date:
          type: string
          description: last updated time
          format: date-time
        created_date:
          type: string
          description: time created
          format: date-time
        metadata:
          type: object
          properties: {}
          description: user defined optional metadata
        urls_metadata:
          type: object
          properties: {}
          description: url level metadata
    SystemVersionOutputRef:
      type: object
      properties:
        commit:
          type: string
          description: the current git commit hash for this version
        version:
          type: string
          description: the current git tag version
    SystemStatsOutputRef:
      type: object
      properties:
        fileCount:
          type: integer
          description: the number of records stored in IndexD
        totalFileSize:
          type: integer
          description: the accumulated size of the object files recorded in IndexD
    DataObject:
      required:
      - checksums
      - created
      - id
      - size
      type: object
      properties:
        id:
          type: string
          description: An identifier unique to this Data Object.
        name:
          type: string
          description: A string that can be optionally used to name a Data Object.
        size:
          type: string
          description: The computed size in bytes.
          format: int64
        created:
          type: string
          description: Timestamp of object creation in RFC3339.
          format: date-time
        updated:
          type: string
          description: |-
            Timestamp of update in RFC3339, identical to create timestamp in systems
            that do not support updates.
          format: date-time
        version:
          type: string
          description: A string representing a version.
        mime_type:
          type: string
          description: |-
            A string providing the mime-type of the Data Object.
            For example, "application/json".
        checksums:
          type: array
          description: The checksum of the Data Object. At least one checksum must
            be provided.
          items:
            $ref: '#/components/schemas/Checksum'
        urls:
          type: array
          description: The list of URLs that can be used to access the Data Object.
          items:
            $ref: '#/components/schemas/URL'
        description:
          type: string
          description: A human readable description of the contents of the Data Object.
        aliases:
          type: array
          description: |-
            A list of strings that can be used to find this Data Object.
            These aliases can be used to represent the Data Object's location in
            a directory (e.g. "bucket/folder/file.name") to make Data Objects
            more discoverable. They might also be used to represent
          items:
            type: string
    ListDataObjectsRequest:
      type: object
      properties:
        alias:
          type: string
          description: If provided will only return Data Objects with the given alias.
        url:
          type: string
          description: |-
            If provided will return only Data Objects with a that URL matches
            this string.
        checksum:
          type: string
          description: The hexlified checksum that one would like to match on.
        checksum_type:
          type: string
          description: |-
            If provided will restrict responses to those that match the provided
            type.
            possible values:
            md5                # most blob stores provide a checksum using this
            multipart-md5      # multipart uploads provide a specialized tag in S3
            sha256
            sha512
        page_size:
          type: integer
          description: |-
            Specifies the maximum number of results to return in a single page.
            If unspecified, a system default will be used.
          format: int32
        page_token:
          type: string
          description: |-
            The continuation token, which is used to page through large result sets.
            To get the next page of results, set this parameter to the value of
            `next_page_token` from the previous response.
      description: |-
        Allows a requester to list and filter Data Objects. Only Data Objects
        matching all of the requested parameters will be returned.
    ListDataObjectsResponse:
      type: object
      properties:
        data_objects:
          type: array
          description: The list of Data Objects.
          items:
            $ref: '#/components/schemas/DataObject'
        next_page_token:
          type: string
          description: |-
            The continuation token, which is used to page through large result sets.
            Provide this value in a subsequent request to return the next page of
            results. This field will be empty if there aren't any additional results.
      description: |-
        A list of Data Objects matching the requested parameters, and a paging
        token, that can be used to retrieve more results.
    GetDataObjectResponse:
      required:
      - data_object
      type: object
      properties:
        data_object:
          $ref: '#/components/schemas/DataObject'
    URL:
      required:
      - url
      type: object
      properties:
        url:
          type: string
          description: A URL that can be used to access the file.
        system_metadata:
          $ref: '#/components/schemas/SystemMetadata'
        user_metadata:
          $ref: '#/components/schemas/UserMetadata'
    URLsOutput:
      type: array
      items:
        type: object
        properties:
          did:
            type: string
          urls:
            type: array
            items:
              type: string
    URLsMetadataOutput:
        allOf:
         - $ref: '#/components/schemas/URLsOutput'
         - type: array
         - items:
            type: object
            properties:
             rev:
                type: string
    SystemMetadata:
      type: object
      description: |-
        OPTIONAL
        These values are reported by the underlying object store.
        A set of key-value pairs that represent system metadata about the object.
    UserMetadata:
      type: object
      description: |-
        OPTIONAL
        A set of key-value pairs that represent metadata provided by the uploader.
    Checksum:
      required:
      - checksum
      type: object
      properties:
        checksum:
          type: string
          description: The hex-string encoded checksum for the Data.
        type:
          type: string
          description: |-
            The digest method used to create the checksum. If left unspecified md5
            will be assumed.
            possible values:
            md5                # most blob stores provide a checksum using this
            multipart-md5      # multipart uploads provide a specialized tag in S3
            sha256
            sha512
    ChecksumRequest:
      type: object
      properties:
        checksum:
          type: string
          description: |-
            REQUIRED
            The hexlified checksum that one would like to match on.
        type:
          type: string
          description: |-
            OPTIONAL
            If provided will restrict responses to those that match the provided
            type.
            possible values:
            md5                # most blob stores provide a checksum using this
            multipart-md5      # multipart uploads provide a specialized tag in S3
            sha256
            sha512
    ErrorResponse:
      type: object
      properties:
        msg:
          type: string
          description: A detailed error message.
        status_code:
          type: integer
          description: The integer representing the HTTP status code (e.g. 200, 404).
      description: An object that can optionally include information about the error.
    UrlObject:
      type: object
      properties:
        url:
          type: string
        metadata:
          type: object
          properties: {}
    UrlOutputRef:
      type: object
      properties:
        urls:
          type: array
          items:
            $ref: '#/components/schemas/UrlObject'
        size:
          type: integer
          description: size in bytes
          format: int64
        start:
          type: integer
          description: start index for the pagination
          format: int64
        limit:
          type: integer
          description: number of aliases to return
          format: int64
        hashes:
          $ref: '#/components/schemas/HashInfo'
    ListRecords:
      type: object
      properties:
        ids:
          type: array
          items:
            $ref: '#/components/schemas/DID'
        records:
          type: array
          items:
            $ref: '#/components/schemas/OutputInfo'
        size:
          type: integer
          description: size in bytes
          format: int64
        start:
          type: integer
          description: start index for the pagination
          format: int64
        limit:
          type: integer
          description: number of dids to return
          format: int64
        file_name:
          type: string
        urls:
          type: array
          items:
            type: string
        acl:
          type: array
          items:
            type: string
        hashes:
          $ref: '#/components/schemas/HashInfo'
        metadata:
          type: object
          properties: {}
        version:
          type: string
  securitySchemes:
    cdis_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://data-commons.org/oauth/dialog
          scopes:
            write:index: modify any entry in the index
            read:index: read any entry from the index
    basic_auth:
      type: http
      scheme: basic
